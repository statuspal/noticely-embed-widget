name: CI/CD

on:
  push:
  pull_request:

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Run linter
        run: npm run lint

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Cache dependencies and build files
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .vite
          key: ${{ runner.os }}-npm-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-npm-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate version tag
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d-%H%M%S')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: v$VERSION"

      - name: Create GitHub Release with build artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'Build ${{ steps.version.outputs.version }}'
          body: |
            Automated build from commit ${{ github.sha }}
          files: |
            dist/*
          draft: false
          prerelease: false
